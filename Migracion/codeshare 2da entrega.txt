/*------------------------------------PROCEDIMIENTOS PARA MIGRAR TABLAS------------------------------------*/
CREATE PROCEDURE dbo.migrar_producto_categoria
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
      CREATE TABLE dbo.Producto_categoria (
        id_producto_categoria INT PRIMARY KEY IDENTITY(1,1),
        producto_categoria_detalle VARCHAR(100) NOT NULL,

        CONSTRAINT UQ_Producto_categoria_detalle UNIQUE (producto_categoria_detalle)
			);
      --rellenar tabla
      INSERT INTO dbo.Producto_categoria(producto_categoria_detalle)
     		SELECT DISTINCT PRODUCTO_CATEGORIA
      	FROM dbo.Maestra
      	WHERE PRODUCTO_CATEGORIA IS NOT NULL
      PRINT 'Migración de migrar_producto_categoria terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;

------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_producto_subcategoria
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
       CREATE TABLE dbo.Producto_subcategoria (
          id_producto_subcategoria INT PRIMARY KEY IDENTITY(1,1),
          producto_subcategoria_detalle VARCHAR(100),

          CONSTRAINT UQ_Producto_subcategoria_detalle UNIQUE (producto_subcategoria_detalle)
				);
      --rellenar tabla
      INSERT INTO dbo.Producto_subcategoria(producto_subcategoria_detalle)
     		SELECT DISTINCT PRODUCTO_SUB_CATEGORIA
      	FROM dbo.Maestra
      	WHERE PRODUCTO_SUB_CATEGORIA IS NOT NULL
      PRINT 'Migración de migrar_producto_subcategoria terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_producto_marca
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
      CREATE TABLE dbo.Producto_marca (
        id_producto_marca INT PRIMARY KEY IDENTITY(1,1),
        producto_marca_detalle VARCHAR(100),
        
        CONSTRAINT UQ_Producto_marca_detalle UNIQUE (producto_marca_detalle)
   		 );
      --rellenar tabla
      INSERT INTO dbo.Producto_marca(producto_marca_detalle)
     		SELECT DISTINCT PRODUCTO_MARCA
      	FROM dbo.Maestra
      	WHERE PRODUCTO_MARCA IS NOT NULL
      PRINT 'Migración de migrar_producto_marca terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_cliente_contacto
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
       CREATE TABLE dbo.Cliente_Contacto (
        id_cliente_contacto INT PRIMARY KEY IDENTITY(1,1),
        cliente_contacto_numero VARCHAR(20),
         
        CONSTRAINT UQ_cliente_contacto_numero UNIQUE (cliente_contacto_numero)
			);
      --rellenar tabla
      INSERT INTO dbo.Cliente_Contacto(cliente_contacto_numero)
     		SELECT DISTINCT CLIENTE_TELEFONO
      	FROM dbo.Maestra
      	WHERE CLIENTE_TELEFONO IS NOT NULL
      PRINT 'Migración de migrar_cliente_contacto terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_tipo_medio_de_pago
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
      CREATE TABLE dbo.Tipo_medio_de_pago (
        id_tipo_medio_pago INT PRIMARY KEY IDENTITY(1,1),
        tipo_medio_pago_nombre VARCHAR(255) NOT NULL,

        CONSTRAINT UQ_tipo_medio_pago_nombre UNIQUE (tipo_medio_pago_nombre)
			);
      --rellenar tabla
      INSERT INTO dbo.Tipo_medio_de_pago(tipo_medio_pago_nombre)
     		SELECT DISTINCT PAGO_TIPO_MEDIO_PAGO
      	FROM dbo.Maestra
      	WHERE PAGO_TIPO_MEDIO_PAGO IS NOT NULL
      PRINT 'Migración de migrar_tipo_medio_de_pago terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_descuento
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
      CREATE TABLE dbo.Descuento (
        id_descuento INT PRIMARY KEY IDENTITY(1,1),
        descuento_descripcion VARCHAR(255) NOT NULL,
        descuento_fecha_inicio DATE NOT NULL,
        descuento_fecha_fin DATE NOT NULL,
        descuento_valor_porcentual_a_aplicar DECIMAL(5, 2) NOT NULL,
        descuento_tope DECIMAL(10, 2) NOT NULL,

        CONSTRAINT CHK_Descuento_fechas CHECK (fecha_fin >= fecha_inicio),
        CONSTRAINT CHK_Descuento_valor_porcentual CHECK
          (descuento_valor_porcentual_a_aplicar >= 0 AND descuento_valor_porcentual_a_aplicar <= 99.99),
        CONSTRAINT CHK_Descuento_tope CHECK (descuento_tope >= 0 AND descuento_tope <= 99999999.99) 
          --No se si es tanto el descuento pero weno
			);
      --rellenar tabla
      INSERT INTO dbo.Descuento(
        	id_descuento,
        	descuento_descripcion,
        	descuento_fecha_inicio,
        	descuento_fecha_fin,
        	descuento_valor_porcentual_a_aplicar,
        	descuento_tope
      )
     		
      	FROM dbo.Maestra
      	WHERE DESCUENTO_CODIGO IS NOT NULL
        	AND DESCUENTO_PORCENTAJE_DESC IS NOT NULL
      PRINT 'Migración de migrar_descuento terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_descuento
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
      CREATE TABLE dbo.Regla (
        id_regla INT PRIMARY KEY IDENTITY(1,1),
        regla_cantidad_aplicable INT NOT NULL,
        regla_descripcion VARCHAR(255) NOT NULL,
        regla_cantidad_aplicable_descuento INT NOT NULL,
        regla_cantidad_maxima INT NOT NULL,
        regla_misma_marca BOOLEAN NOT NULL,
        regla_mismo_producto BOOLEAN NOT NULL,
        regla_descuento_aplicable_prod DECIMAL(3, 2) NOT NULL,

        CONSTRAINT CHK_Regla_descuento_aplicable_prod CHECK (regla_descuento_aplicable_prod >= 0 AND regla_descuento_aplicable_prod <= 0.99)
      );
      --rellenar tabla
      INSERT INTO dbo.Regla(
        regla_cantidad_aplicable,
        regla_descripcion,
        regla_cantidad_aplicable_descuento,
        regla_cantidad_maxima,
        regla_misma_marca,
        regla_mismo_producto,
        regla_descuento_aplicable_prod
      )
     		SELECT(
          REGLA_CANT_APLICABLE_REGLA,
          REGLA_DESCRIPCION,
          REGLA_CANT_APLICA_DESCUENTO,
          REGLA_CANT_MAX_PROD,
          REGLA_APLICA_MISMA_MARCA,
          REGLA_APLICA_MISMO_PROD,
          REGLA_DESCUENTO_APLICABLE_PROD
        )
      	FROM dbo.Maestra
      	WHERE DESCUENTO_CODIGO IS NOT NULL
        	AND DESCUENTO_PORCENTAJE_DESC IS NOT NULL
      PRINT 'Migración de migrar_descuento terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_supermercado
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
     CREATE TABLE dbo.Supermercado (
        super_id INT PRIMARY KEY IDENTITY(1,1),
        super_nombre VARCHAR(255) UNIQUE NOT NULL,
        super_razon_social VARCHAR(255) NOT NULL,
        super_cuit VARCHAR(20) NOT NULL,
        super_iibb VARCHAR(20) NOT NULL,
        super_fecha_inicio_actividad DATE NOT NULL,
        super_condicion_fiscal VARCHAR(50) NOT NULL
    	);
      --rellenar tabla
      INSERT INTO dbo.Supermercado(
        super_nombre,
        super_razon_social,
        super_cuit,
        super_iibb,
        super_fecha_inicio_actividad,
        super_condicion_fiscal
      )
     		SELECT(
          SUPER_NOMBRE,
          SUPER_RAZON_SOC,
          SUPER_CUIT,
          SUPER_IIBB,
          SUPER_FECHA_INI_ACTIVIDAD,
          SUPER_CONDICION_FISCAL
          /*Esto no lo guardamos aca, sino en la tabla dbo.Domicilio*/
          --SUPER_DOMICILIO
          /*Estos los guardamos en sus respectivas tablas*/
          --SUPER_LOCALIDAD
					--SUPER_PROVINCIA
        )
      	FROM dbo.Maestra
      	WHERE SUPER_NOMBRE IS NOT NULL
        	AND SUPER_RAZON_SOC IS NOT NULL
          AND SUPER_CUIT IS NOT NULL
          AND SUPER_IIBB IS NOT NULL
          AND SUPER_CONDICION_FISCAL IS NOT NULL
      PRINT 'Migración de migrar_supermercado terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_tipo_caja
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
      CREATE TABLE dbo.Tipo_Caja(
        id_tipo_caja INT PRIMARY KEY IDENTITY(1,1),
        tipo_caja_descripcion VARCHAR(50),
        caja_numero INT
        
        CONSTRAINT UQ_tipo_caja_descripcion UNIQUE (tipo_caja_descripcion)
  	  );
      --rellenar tabla
      INSERT INTO dbo.Tipo_Caja(
      	tipo_caja_descripcion,
        caja_numero,
      )
     		SELECT DISTINCT(
          CAJA_TIPO,
        	CAJA_NUMERO,
        )
      	FROM dbo.Maestra
      	WHERE CAJA_TIPO IS NOT NULL
      PRINT 'Migración de migrar_tipo_caja terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_tipo_comprobante
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
      CREATE TABLE dbo.Tipo_Comprobante(
        id_tipo_comprobante INT PRIMARY KEY IDENTITY(1,1),
        tipo_comprobante_nombre VARCHAR (1), --caracter
      );
      --rellenar tabla
      INSERT INTO dbo.Tipo_Comprobante(tipo_comprobante_nombre)
     		SELECT DISTINCT(TICKET_TIPO_COMPROBANTE)
      	FROM dbo.Maestra
      	WHERE TICKET_TIPO_COMPROBANTE IS NOT NULL
      PRINT 'Migración de migrar_tipo_comprobante terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_provincia
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
       CREATE TABLE dbo.Provincia(
        id_provincia INT PRIMARY KEY IDENTITY(1,1),
        provincia_nombre VARCHAR(100),
         
        CONSTRAINT UQ_provincia_nombre UNIQUE (provincia_nombre)
			);
    
      --rellenar tabla
      INSERT INTO dbo.Provincia(provincia_nombre)
        SELECT DISTINCT SUCURSAL_PROVINCIA
        FROM dbo.Maestra
        WHERE SUCURSAL_PROVINCIA IS NOT NULL;
      
      INSERT INTO dbo.Provincia(provincia_nombre)
      SELECT DISTINCT SUPER_PROVINCIA
      FROM dbo.Maestra
      WHERE SUPER_PROVINCIA IS NOT NULL
      	AND SUPER_PROVINCIA NOT IN (SELECT provincia_nombre FROM dbo.Provincia);
      PRINT 'Migración de migrar_provincia terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.migrar_provincia
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
        CREATE TABLE dbo.Localidad(
          id_localidad INT PRIMARY KEY IDENTITY(1,1),
          localidad_nombre VARCHAR(100),

          CONSTRAINT UQ_localidad_nombre UNIQUE (localidad_nombre)
        );
    
      --rellenar tabla
      INSERT INTO dbo.Localidad(localidad_nombre)
        SELECT DISTINCT SUCURSAL_LOCALIDAD
        FROM dbo.Maestra
        WHERE SUCURSAL_LOCALIDAD IS NOT NULL;
      
      INSERT INTO dbo.Localidad(localidad_nombre)
      SELECT DISTINCT SUPER_LOCALIDAD
      FROM dbo.Maestra
      WHERE SUPER_LOCALIDAD IS NOT NULL
      	AND SUPER_LOCALIDAD NOT IN (SELECT localidad_nombre FROM dbo.Localidad);
      PRINT 'Migración de migrar_tipo_comprobante terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
--NO HAY NINGUN DATO EN LA TABLA MAESTRA DE TIPO ENTIDAD BANCARIA
--TAMBIEN DE CUOTAS SAQUE LA CLASE PORQUE SOLO ESTA EL NUMERO, NO HACE FALTA ID
/*
CREATE PROCEDURE dbo.migrar_entidad_bancaria
AS
BEGIN   
    BEGIN TRANSACTION;
    BEGIN TRY
    	--crear tabla
      CREATE TABLE dbo.Entidad_Bancaria (
        id_entidad_bancaria INT PRIMARY KEY IDENTITY(1,1),
        entidad_bancaria_nombre VARCHAR(255) NOT NULL,

        CONSTRAINT UQ_entidad_bancaria_nombre UNIQUE (entidad_bancaria_nombre)
      );
      --rellenar tabla
      INSERT INTO dbo.Entidad_Bancaria(entidad_bancaria_nombre)
     		SELECT DISTINCT CLIENTE_TELEFONO
      	FROM dbo.Maestra
      	WHERE CLIENTE_TELEFONO IS NOT NULL
      PRINT 'Migración de medio de pago de compra terminada';
    COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000);
        SET @ErrorMessage = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
*/
------------------------------------------------------------------------------------------------------------------------------------------------

-- Segun orden de creacion e insercion de tablas (primero las que no tienen FK y despues las que si)
    ---------------------------------------------Aca arrancan las F.K---------------------------------------------
    --Seguro haya que hacer condiciones, tablas secundarias, buscra igualando cosas, etc etc (ver "Estrategia" de tp de nacho)
		--Eto es complicado, lean muy bien el doc asi entienden    
    
     CREATE TABLE Promoxion_X_Producto (
      id_promocion INT,
      id_producto INT,

      CONSTRAINT PK_Promoxion_X_Producto PRIMARY KEY (id_promocion, id_producto),
      CONSTRAINT FK_Promoxion_X_Producto_id_promocion FOREIGN KEY (id_promocion) REFERENCES Promocion(id_promocion),
      CONSTRAINT FK_Promoxion_X_Producto_id_producto FOREIGN KEY (id_producto) REFERENCES Producto(id_producto)
		);
     
    CREATE TABLE Producto (
      id_producto INT PRIMARY KEY AUTO_INCREMENT,
      producto_nombre VARCHAR(100) NOT NULL,
      producto_descripcion VARCHAR(100),
      producto_precio DECIMAL(10,2),
      id_producto_categoria INT,
      id_producto_subcategoria INT,
      id_marca INT,

      CONSTRAINT FK_Producto_Producto_categoria 
      		FOREIGN KEY (id_producto_categoria) 
          REFERENCES Producto_categoria(id_producto_categoria),
      CONSTRAINT FK_Producto_Producto_subcategoria
      		FOREIGN KEY (id_producto_subcategoria) 
          REFERENCES Producto_subcategoria(id_producto_subcategoria),
      CONSTRAINT FK_Producto_Producto_marca 
      		FOREIGN KEY (id_marca) 
          REFERENCES Producto_marca(id_producto_marca)
		);


    CREATE TABLE Promocion (
      id_promocion INT PRIMARY KEY AUTO_INCREMENT,
      promo_descripcion VARCHAR(255) NOT NULL,
      promo_fecha_inicio DATE NOT NULL,
      promo_fecha_fin DATE NOT NULL,
      id_regla INT,

      CONSTRAINT FK_Promocion_Regla_X_Promocion FOREIGN KEY (id_regla) 
          REFERENCES Regla_X_Promocion(id_regla)
		);


    CREATE TABLE Promocion_X_ItemTicket (
      id_promocion INT,
      id_producto INT,
      id_ticket INT,
      
      CONSTRAINT PK_Promocion_X_ItemTicket PRIMARY KEY (id_promocion, id_producto, id_ticket),

      CONSTRAINT FK_Promocion_X_ItemTicket_Promocion FOREIGN KEY (id_promocion) REFERENCES Promocion(id_promocion),
      CONSTRAINT FK_Promocion_X_ItemTicket_Producto FOREIGN KEY (id_producto) REFERENCES Producto(id_producto),
      CONSTRAINT FK_Promocion_X_ItemTicket_Item_Ticket FOREIGN KEY (id_ticket) REFERENCES Item_Ticket(id_ticket)      
    );

    CREATE TABLE Regla_X_Promocion (
        id_promocion INT,
        id_regla INT,

        CONSTRAINT FK_Regla_X_Promocion_Promocion FOREIGN KEY (id_promocion) REFERENCES Promocion(id_promocion),
        CONSTRAINT FK_Regla_X_Promocion_Regla FOREIGN KEY (id_regla) REFERENCES Regla(id_regla),

        CONSTRAINT PK_Regla_X_Promocion PRIMARY KEY (id_promocion, id_regla)
    );

  
      CREATE TABLE Ticket( 
      id_ticket INT,
      id_tipo_comprobante INT --podría ser nosé 1,2 o 3, verlo bien,  
      id_sucursal INT,

      ticket_fecha_hora DATE NOT NULL,
      ticket_subtotal INT,
      ticket_total INT,
      ticket_monto_total_promociones_aplicadas INT,
      ticket_monto_total_descuentos_aplicados INT,

      CONSTRAINT PK_Ticket_id_ticket PRIMARY KEY AUTO_INCREMENT (id_ticket),
      CONSTRAINT PK_Ticket_id_tipo_comprobante PRIMARY KEY (id_tipo_comprobante),
      CONSTRAINT PK_Ticket_id_sucursal PRIMARY KEY (id_sucursal)

      CONSTRAINT FK_Ticket_id_tipo_comprobante FOREIGN KEY(id_tipo_comprobante) REFERENCES Tipo_Comprobante (id_tipo_comprobante),
      CONSTRAINT FK_Ticket_id_sucursal FOREIGN KEY (id_sucursal) REFERENCES Sucursal (id_sucursal),
      CONSTRAINT FK_Ticket_id_caja FOREIGN KEY (id_caja) REFERENCES Caja (id_caja),
      CONSTRAINT FK_Ticket_empleado FOREIGN KEY (id_empleado) REFERENCES Empleado (id_empleado)
    );

    CREATE TABLE Caja(
      id_caja INT,
      caja_numero INT, --quizás simplemente INT

      CONSTRAINT PK_Caja_id_caja PRIMARY KEY (id_caja),

      CONSTRAINT FK_Caja_id_caja_tipo FOREIGN KEY (id_tipo_caja) REFENRENCES Tipo_Caja (id_tipo_caja)
    );

    CREATE TABLE Item_Ticket(
      id_producto INT,
      id_ticket INT,
      id_tipo_comprobante INT,
      id_sucursar INT,
      item_ticket_cantidad INT,
      item_ticket_precio INT,

      CONSTRAINT PK_Item_Ticket_id_producto PRIMARY KEY (id_producto),
      CONSTRAINT PK_Item_Ticket_id_ticket PRIMARY KEY AUTO_INCREMENT (id_ticket),
      CONSTRAINT PK_Item_Ticket_ id_tipo_comprobante PRIMARY KEY (id_tipo_comprobante),
      CONSTRAINT PK_Item_Ticket_id_sucursal PRIMARY KEY (id_sucursal),

      CONSTRAINT FK_Item_Ticket_id_producto FOREIGN KEY (id_producto) REFERENCES Producto (id_producto),
      CONSTRAINT FK_Item_Ticket_id_ticket FOREIGN KEY (id_ticket) REFERENCES Ticket (id_ticket),
      CONSTRAINT FK_Item_Ticket_id_tipo_comprobante FOREIGN KEY (id_tipo_comprobante) REFERENCES Ticket (id_tipo_comprobante),
      CONSTRAINT FK_Item_Ticket_id_sucursal FOREIGN KEY (id_sucursal)  REFERENCES Sucursal (id_sucursal),
      CONSTRAINT FK_Item_Ticket_id_promocion FOREIGN KEY (id_promocion) REFERENCES Promocion (id_promocion)
    );

    CREATE TABLE Empleado(
      id_empleado INT,
      empleado_nombre VARCHAR(15),
      empleado_apellido VARCHAR(30),
      empleado_fecha_registro DATE NOT NULL,
      empleado_fecha_nacimiento DATE NOT NULL,
      empleado_email VARCHAR (30),

      CONSTRAINT PK_Empleado_id_empleado PRIMARY KEY AUTO_INCREMENT (id_empleado)
      
      CONSTRAINT FK_Empleado_id_sucursal FOREIGN KEY (id_sucursal) REFERENCES Sucursal (id_sucursal) 
    );

    CREATE TABLE Ticket_X_Medio_De_Pago_Aplicado(
      id_medio_de_pago_aplicado INT,
      id_ticket INT,
      id_tipo_comprobante INT,
      id_sucursar INT,

      CONSTRAINT PK_Ticket_X_Medio_De_Pago_Aplicado_id_medio_de_pago_aplicado PRIMARY KEY (id_medio_de_pago_aplicado)
      CONSTRAINT PK_Ticket_X_Medio_De_Pago_Aplicado_id_ticket PRIMARY KEY AUTO_INCREMENT (id_ticket),
      CONSTRAINT PK_Ticket_X_Medio_De_Pago_Aplicado_id_tipo_comprobante PRIMARY KEY (id_tipo_comprobante) 
      CONSTRAINT PK_Ticket_X_Medio_De_Pago_Aplicado_id_sucursal PRIMARY KEY (id_sucursal)

      CONSTRAINT FK_Ticket_X_Medio_De_Pago_Aplicado_id_medio_de_pago_aplicado FOREIGN KEY (id_medio_de_pago_aplicado) REFERENCES Medio_De_Pago_Aplicado(id_medio_de_pago_aplicado),
      CONSTRAINT FK_Ticket_X_Medio_De_Pago_Aplicado_id_ticket FOREIGN KEY (id_ticket) REFERENCES Ticket (id_ticket),
      CONSTRAINT Ticket_X_Medio_De_Pago_Aplicado_id_tipo_comprobante FOREIGN KEY (id_tipo_comprobante) REFERENCES Tipo_Comprobante (id_tipo_comprobante),
      CONSTRAINT Ticket_X_Medio_De_Pago_Aplicado_id_sucursal FOREIGN KEY (id_sucursal) REFERENCES Sucursal (id_sucursal)
    );
    
    
    CREATE TABLE Domicilio (
      id_domicilio INT PRIMARY KEY,
      id_localidad INT,
      id_provincia INT,
      domicilio_calle VARCHAR(255),
      domicilio_numero INT,
      domicilio_detalle_piso VARCHAR(100),

      CONSTRAINT FK_Domicilio_Localidad FOREIGN KEY (id_localidad) REFERENCES Localidad(id_localidad),
      CONSTRAINT FK_Domicilio_Provincia FOREIGN KEY (id_provincia) REFERENCES Provincia(id_provincia)
		);
    
    CREATE TABLE Sucursal (
      id_sucursal INT PRIMARY KEY IDENTITY(1,1),
      id_domicilio INT,
      id_supermercado INT,
      sucursal_nombre VARCHAR(255) UNIQUE NOT NULL,

      CONSTRAINT FK_Sucursal_Domicilio FOREIGN KEY (id_domicilio) REFERENCES Domicilio(id_domicilio),
      CONSTRAINT FK_Sucursal_Supermercado FOREIGN KEY (id_supermercado) REFERENCES Supermercado(super_id)
		);

    
    CREATE TABLE Cliente (
      id_cliente INT PRIMARY KEY,
      dni INT,
      id_domicilio INT,
      id_cliente_contacto INT,
      cliente_nombre VARCHAR(100),
      cliente_apellido VARCHAR(100),
      cliente_fecha_registro DATE,
      cliente_mail VARCHAR(255) UNIQUE,
      cliente_fecha_nacimiento DATE,

      CONSTRAINT FK_Cliente_Domicilio FOREIGN KEY (id_domicilio) REFERENCES Domicilio(id_domicilio),
      CONSTRAINT FK_Cliente_Cliente_Contacto FOREIGN KEY (id_cliente_contacto) REFERENCES Cliente_Contacto(id_cliente_contacto)		
		);
    
    CREATE TABLE Medio_de_pago (
      id_medio_pago INT PRIMARY KEY,
      id_tipo_medio_pago INT,
      id_entidad_bancaria INT,
      medio_de_pago_nombre VARCHAR(255),

      CONSTRAINT FK_Medio_de_pago_Tipo_medio_de_pago FOREIGN KEY (id_tipo_medio_pago)
      	REFERENCES Tipo_medio_de_pago(id_tipo_medio_pago),
      CONSTRAINT FK_Medio_de_pago_Entidad_bancaria FOREIGN KEY (id_entidad_bancaria) 
      	REFERENCES Medio_de_pago_X_Entidad_bancaria(id_entidad_bancaria)
		);

    CREATE TABLE Medio_de_pago_x_entidad_bancaria (
      id_entidad_bancaria INT,
      id_medio_pago INT,
      PRIMARY KEY (id_entidad_bancaria, id_medio_pago),

      CONSTRAINT FK_Medio_de_pago_x_entidad_bancaria_Entidad_Bancaria FOREIGN KEY (id_entidad_bancaria) 
      	REFERENCES Entidad_Bancaria(id_entidad_bancaria),
      CONSTRAINT FK_Medio_de_pago_x_entidad_bancaria_Tipo_medio_de_pago FOREIGN KEY (id_medio_pago) 
      	REFERENCES Tipo_medio_de_pago(id_tipo_medio_pago)
		);
        
    CREATE TABLE Medio_de_pago_aplicado (
      id_medio_pago_aplicado INT PRIMARY KEY,
      id_medio_pago INT,
      id_cuota INT,
      id_cliente INT,
      id_descuento INT,
      medio_de_pago_numero VARCHAR(50),
      medio_de_pago_fecha_vencimiento DATE,
      medio_de_pago_monto_base DECIMAL(10, 2),
      medio_de_pago_monto_de_descuento_a_aplicar DECIMAL(10, 2),
      medio_de_pago_monto_base_descontado DECIMAL(10, 2),

      CONSTRAINT FK_Medio_de_pago_aplicado_Medio_de_pago FOREIGN KEY (id_medio_pago) REFERENCES Medio_de_pago(id_medio_pago),
      CONSTRAINT FK_Medio_de_pago_aplicado_Cuota FOREIGN KEY (id_cuota) REFERENCES Cuota(id_cuota),
      CONSTRAINT FK_Medio_de_pago_aplicado_Cliente FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente),
      CONSTRAINT FK_Medio_de_pago_aplicado_Descuento FOREIGN KEY (id_descuento) REFERENCES Descuento(id_descuento)
		);
      
    CREATE TABLE Envio (
      id_envio INT PRIMARY KEY,
      id_ticket INT,
      id_cliente INT,
      envio_fecha_programada DATE,
      envio_horario_inicio TIME,
      envio_horario_fin TIME,
      envio_fecha_entrega DATE,
      envio_estado VARCHAR(50),
      envio_costo DECIMAL(10, 2),
      envio_estado_envio VARCHAR(50),

      CONSTRAINT FK_Envio_Ticket FOREIGN KEY (id_ticket) REFERENCES Ticket(id_ticket),
      CONSTRAINT FK_Envio_Cliente FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente)
		);










